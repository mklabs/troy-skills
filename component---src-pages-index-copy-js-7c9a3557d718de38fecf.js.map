{"version":3,"sources":["webpack:///./src/pages/index copy.js"],"names":["Home","data","nodesets","locAgentSubtypes","allLandUnitsLocTsv","allAgentsSubtypesTablesTsv","allCharacterSkillNodesTablesTsv","allCulturesSubculturesLocTsv","allFactionAgentPermittedSubtypesTablesTsv","allFactionsLocTsv","getAgentLoc","key","nodes","find","node","getOnScreenName","subtype","name","text","associated_unit_override","getFactionNameForAgentSubtype","Set","filter","map","faction","size","getFactionAgentPermittedSubtype","loc","getFactionName","skillNodes","rows","character_skill_node_set_key","visible_in_ui","sort","a","b","character_skill_key","length","orderedSkillKeys","n","join","includes","push","agents","epicHeroes","heroClasses","agentKeys","factionGroups","troy_achilles","troy_aeneas","troy_agamemnon","troy_hector","troy_hippolyta","troy_menelaus","troy_odysseus","troy_paris","troy_penthesilea","troy_sarpedon","forEach","row","agentLoc","agent_subtype_key","agent_key","factionGroup","subculture","getSubcultureName","subcultureKey","title","className","Object","keys","fields","to","slug","reverse","query"],"mappings":"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","file":"component---src-pages-index-copy-js-7c9a3557d718de38fecf.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport \"../styles/skill-trees-list.scss\"\n\nexport default function Home({ data }) {\n    const {\n        nodesets,\n        locAgentSubtypes,\n        allLandUnitsLocTsv,\n        allAgentsSubtypesTablesTsv,\n        allCharacterSkillNodesTablesTsv,\n        allCulturesSubculturesLocTsv,\n        allFactionAgentPermittedSubtypesTablesTsv,\n        allFactionsLocTsv\n    } = data\n\n    const getAgentLoc = key => {\n        return locAgentSubtypes.nodes.find(\n            node => node.key === `agent_subtypes_onscreen_name_override_${key}`\n        )\n    }\n\n    const getOnScreenName = key => {\n        const node = getAgentLoc(key)\n        const subtype = allAgentsSubtypesTablesTsv.nodes.find(node => node.key === key)\n\n        if (!node || !subtype) {\n            return \"\"\n        }\n\n        let name = node.text\n        if (node.text === \"Epic Hero\") {\n            const heroName = allLandUnitsLocTsv.nodes.find(\n                node => node.key === `land_units_onscreen_name_${subtype.associated_unit_override}`\n            )\n            name = heroName.text\n        }\n\n        return name\n    }\n\n    const getSubcultureName = key => {\n        const loc = allCulturesSubculturesLocTsv.nodes.find(\n            node => node.key === `cultures_subcultures_name_${key}`\n        )\n        return loc ? loc.text : \"\"\n    }\n\n    const getFactionAgentPermittedSubtype = key => {\n        return allFactionAgentPermittedSubtypesTablesTsv.nodes.find(node => node.subtype === key)\n    }\n\n    const getFactionName = faction => {\n        const loc = allFactionsLocTsv.nodes.find(\n            node => node.key === `factions_screen_name_${faction.faction}`\n        )\n        return loc ? loc.text : \"\"\n    }\n\n    const getFactionNameForAgentSubtype = key => {\n        const permittedSubtypes = new Set(\n            allFactionAgentPermittedSubtypesTablesTsv.nodes\n                .filter(node => node.subtype === key)\n                .map(node => node.faction)\n        )\n\n        if (permittedSubtypes.size !== 1) {\n            return \"\"\n        }\n\n        const faction = getFactionAgentPermittedSubtype(key)\n        if (!faction) {\n            return \"\"\n        }\n\n        return getFactionName(faction)\n    }\n\n    const skillNodes = []\n    const rows = nodesets.nodes.filter(({ key }) => {\n        const nodes = allCharacterSkillNodesTablesTsv.nodes\n            .filter(\n                node => node.character_skill_node_set_key === key && node.visible_in_ui === \"true\"\n            )\n            .sort((a, b) => {\n                if (a.character_skill_key < b.character_skill_key) {\n                    return -1\n                }\n                if (a.character_skill_key > b.character_skill_key) {\n                    return 1\n                }\n                return 0\n            })\n\n        if (!nodes.length) {\n            return false\n        }\n\n        const orderedSkillKeys = nodes.map(n => n.character_skill_key).join(\",\")\n        if (skillNodes.includes(orderedSkillKeys)) {\n            return false\n        }\n\n        skillNodes.push(orderedSkillKeys)\n        return true\n    })\n\n    const agents = {}\n    const epicHeroes = {}\n    const heroClasses = {}\n    const agentKeys = [\"champion\", \"dignitary\", \"spy\"]\n    const factionGroups = {\n        troy_achilles: \"Danaans\",\n        troy_aeneas: \"Trojans\",\n        troy_agamemnon: \"Danaans\",\n        troy_hector: \"Trojans\",\n        troy_hippolyta: \"Amazons\",\n        troy_menelaus: \"Danaans\",\n        troy_odysseus: \"Danaans\",\n        troy_paris: \"Trojans\",\n        troy_penthesilea: \"Amazons\",\n        troy_sarpedon: \"Trojans\"\n    }\n\n    rows.forEach(row => {\n        const agentLoc = getAgentLoc(row.agent_subtype_key)\n        let key = row.agent_key\n        if (agentLoc.text === \"Epic Hero\") {\n            key = \"epic_heroes\"\n\n            const factionGroup = factionGroups[row.agent_subtype_key]\n            epicHeroes[factionGroup] = epicHeroes[factionGroup] || []\n            epicHeroes[factionGroup].push(row)\n        } else if (agentKeys.includes(row.agent_key)) {\n            key = \"agents\"\n\n            const subculture = getSubcultureName(row.subculture)\n            const subcultureKey = subculture === \"Achaeans\" ? \"Common\" : subculture\n            agents[subcultureKey] = agents[subcultureKey] || []\n            agents[subcultureKey].push(row)\n        } else {\n            key = \"hero_classes\"\n\n            const faction = getFactionNameForAgentSubtype(row.agent_subtype_key) || \"Common\"\n            heroClasses[faction] = heroClasses[faction] || []\n            heroClasses[faction].push(row)\n        }\n    })\n\n    return (\n        <Layout>\n            <SEO title=\"Home\" />\n            <h3>Epic Heroes</h3>\n\n            <div className=\"skill-trees-list\">\n                {Object.keys(epicHeroes).map(factionGroup => (\n                    <div className=\"skill-trees-list-epic-heroes\" key={factionGroup}>\n                        <h4>{factionGroup}</h4>\n\n                        {epicHeroes[factionGroup].map(\n                            ({ key, fields, agent_subtype_key, subculture }) => (\n                                <div key={key}>\n                                    <h3>\n                                        <Link to={fields.slug}>\n                                            {getOnScreenName(agent_subtype_key)}\n                                        </Link>\n                                    </h3>\n                                </div>\n                            )\n                        )}\n                    </div>\n                ))}\n            </div>\n\n            <h3>Hero Classes</h3>\n            <div className=\"skill-trees-list\">\n                {Object.keys(heroClasses).map(faction => (\n                    <div className=\"skill-trees-list-heroes\" key={faction}>\n                        <h4>{faction}</h4>\n\n                        {heroClasses[faction].map(\n                            ({ key, fields, agent_subtype_key, subculture }) => (\n                                <div key={key}>\n                                    <h3>\n                                        <Link to={fields.slug}>\n                                            {getOnScreenName(agent_subtype_key)}-{\" \"}\n                                        </Link>\n                                    </h3>\n                                </div>\n                            )\n                        )}\n                    </div>\n                ))}\n            </div>\n\n            <h3>Agents</h3>\n            <div className=\"skill-trees-list\">\n                {Object.keys(agents)\n                    .reverse()\n                    .map(subculture => (\n                        <div className=\"skill-trees-list-heroes\" key={subculture}>\n                            <h4>{subculture}</h4>\n\n                            {agents[subculture].map(\n                                ({ key, fields, agent_subtype_key, subculture }) => (\n                                    <div key={key}>\n                                        <h3>\n                                            <Link to={fields.slug}>\n                                                {getOnScreenName(agent_subtype_key)}\n                                            </Link>\n                                        </h3>\n                                    </div>\n                                )\n                            )}\n                        </div>\n                    ))}\n            </div>\n        </Layout>\n    )\n}\n\nexport const query = graphql`\n    query {\n        nodesets: allCharacterSkillNodeSetsTablesTsv {\n            distinct(field: key)\n            totalCount\n            nodes {\n                fields {\n                    slug\n                }\n                agent_subtype_key\n                agent_key\n                subculture\n                key\n            }\n        }\n\n        locAgentSubtypes: allAgentSubtypesLocTsv {\n            nodes {\n                key\n                text\n                tooltip\n            }\n        }\n\n        allLandUnitsLocTsv {\n            nodes {\n                key\n                text\n                tooltip\n            }\n        }\n\n        allAgentsSubtypesTablesTsv {\n            nodes {\n                id\n                key\n                associated_unit_override\n            }\n        }\n\n        allCharacterSkillNodesTablesTsv {\n            nodes {\n                id\n                key\n                character_skill_key\n                character_skill_node_set_key\n                visible_in_ui\n            }\n        }\n\n        allCulturesSubculturesLocTsv {\n            nodes {\n                key\n                text\n                tooltip\n            }\n        }\n\n        allFactionAgentPermittedSubtypesTablesTsv {\n            nodes {\n                faction\n                agent\n                subtype\n            }\n        }\n\n        allFactionsLocTsv {\n            nodes {\n                key\n                text\n                tooltip\n            }\n        }\n    }\n`\n"],"sourceRoot":""}