{"version":3,"sources":["webpack:///./node_modules/js-search/dist/esm/js-search.js","webpack:///./src/components/search/search-results.js","webpack:///./src/components/search/loading-indicator.js","webpack:///./src/templates/search.js"],"names":["PrefixIndexStrategy","prototype","expandToken","token","expandedTokens","string","i","length","charAt","push","LowerCaseSanitizer","sanitize","text","toLocaleLowerCase","trim","getNestedFieldValue","object","path","value","TfIdfSearchIndex","uidFieldName","this","_uidFieldName","_tokenToIdfCache","_tokenMap","_proto","indexDocument","uid","doc","tokenDatum","tokenMap","$numDocumentOccurrences","$totalNumOccurrences","$uidMap","uidMap","$document","$numTokenOccurrences","search","tokens","corpus","uidToDocumentMap","numTokens","tokenMetadata","j","numKeys","keys","Object","documents","calculateTfIdf","_createCalculateTfIdf","sort","documentA","documentB","_createCalculateIdf","tokenToIdfCache","numDocumentsWithToken","Math","log","calculateIdf","document","score","inverseDocumentFrequency","Infinity","Array","REGEX","SimpleTokenizer","tokenize","split","filter","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","Search","Error","_indexStrategy","_searchIndex","_sanitizer","_tokenizer","_documents","_searchableFields","Constructor","protoProps","staticProps","addDocument","addDocuments","concat","indexDocuments_","addIndex","field","query","_initialized","indexStrategy","sanitizer","searchIndex","tokenizer","di","numDocuments","sfi","numSearchableFields","fieldValue","searchableField","toString","fieldTokens","fti","numFieldValues","fieldToken","eti","nummExpandedTokens","expandedToken","set","get","SearchResults","results","categories","names","images","useStaticQuery","localStorageCategory","window","localStorage","getItem","useState","selectedCategory","setSelectedCategory","localStorageName","selectedName","setSelectedName","onFilterChange","filterName","e","setItem","handleOnBlur","noResultsMessage","className","agents","epicHeroNames","countBeforeFilters","selectedNameIsAgent","includes","selectedNameIsEpicHero","filteredCategory","result","category","name","onBlur","onChange","disabled","aria-label","map","label","onClick","style","paddingLeft","img","nodes","find","node","image_path","ext","fixed","childImageSharp","to","slug","localised_name","character","title","localised_description","LoadingIndicator","SearchTemplate","data","pageContext","hash","location","searchData","setQuery","setResults","isLoading","setIsLoading","setSearch","refContenteditable","useRef","useEffect","JsSearch","createSearch","qs","parse","stringify","setTimeout","searchQuery","a","b","getSearchResults","hiddenCategories","alphaSort","Set","contentEditable","spellCheck","ref","suppressContentEditableWarning","role","onKeyPress","textContent","current","blur","paddingTop"],"mappings":"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","file":"component---src-templates-search-js-6d6a039902af289a8e3a.js","sourcesContent":["/**\n * Indexes for all substring searches (e.g. the term \"cat\" is indexed as \"c\", \"ca\", \"cat\", \"a\", \"at\", and \"t\").\n */\nvar AllSubstringsIndexStrategy = /*#__PURE__*/function () {\n  function AllSubstringsIndexStrategy() {}\n\n  var _proto = AllSubstringsIndexStrategy.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.expandToken = function expandToken(token) {\n    var expandedTokens = [];\n    var string;\n\n    for (var i = 0, length = token.length; i < length; ++i) {\n      string = '';\n\n      for (var j = i; j < length; ++j) {\n        string += token.charAt(j);\n        expandedTokens.push(string);\n      }\n    }\n\n    return expandedTokens;\n  };\n\n  return AllSubstringsIndexStrategy;\n}();\n/**\n * Indexes for exact word matches.\n */\n\n\nvar ExactWordIndexStrategy = /*#__PURE__*/function () {\n  function ExactWordIndexStrategy() {}\n\n  var _proto = ExactWordIndexStrategy.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.expandToken = function expandToken(token) {\n    return token ? [token] : [];\n  };\n\n  return ExactWordIndexStrategy;\n}();\n/**\n * Indexes for prefix searches (e.g. the term \"cat\" is indexed as \"c\", \"ca\", and \"cat\" allowing prefix search lookups).\n */\n\n\nvar PrefixIndexStrategy = /*#__PURE__*/function () {\n  function PrefixIndexStrategy() {}\n\n  var _proto = PrefixIndexStrategy.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.expandToken = function expandToken(token) {\n    var expandedTokens = [];\n    var string = '';\n\n    for (var i = 0, length = token.length; i < length; ++i) {\n      string += token.charAt(i);\n      expandedTokens.push(string);\n    }\n\n    return expandedTokens;\n  };\n\n  return PrefixIndexStrategy;\n}();\n/**\n * Enforces case-sensitive text matches.\n */\n\n\nvar CaseSensitiveSanitizer = /*#__PURE__*/function () {\n  function CaseSensitiveSanitizer() {}\n\n  var _proto = CaseSensitiveSanitizer.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.sanitize = function sanitize(text) {\n    return text ? text.trim() : '';\n  };\n\n  return CaseSensitiveSanitizer;\n}();\n/**\n * Sanitizes text by converting to a locale-friendly lower-case version and triming leading and trailing whitespace.\n */\n\n\nvar LowerCaseSanitizer = /*#__PURE__*/function () {\n  function LowerCaseSanitizer() {}\n\n  var _proto = LowerCaseSanitizer.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.sanitize = function sanitize(text) {\n    return text ? text.toLocaleLowerCase().trim() : '';\n  };\n\n  return LowerCaseSanitizer;\n}();\n/**\n * Find and return a nested object value.\n *\n * @param object to crawl\n * @param path Property path\n * @returns {any}\n */\n\n\nfunction getNestedFieldValue(object, path) {\n  path = path || [];\n  object = object || {};\n  var value = object; // walk down the property path\n\n  for (var i = 0; i < path.length; i++) {\n    value = value[path[i]];\n\n    if (value == null) {\n      return null;\n    }\n  }\n\n  return value;\n}\n/**\n * Search index capable of returning results matching a set of tokens and ranked according to TF-IDF.\n */\n\n\nvar TfIdfSearchIndex = /*#__PURE__*/function () {\n  function TfIdfSearchIndex(uidFieldName) {\n    this._uidFieldName = uidFieldName;\n    this._tokenToIdfCache = {};\n    this._tokenMap = {};\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = TfIdfSearchIndex.prototype;\n\n  _proto.indexDocument = function indexDocument(token, uid, doc) {\n    this._tokenToIdfCache = {}; // New index invalidates previous IDF caches\n\n    var tokenMap = this._tokenMap;\n    var tokenDatum;\n\n    if (typeof tokenMap[token] !== 'object') {\n      tokenMap[token] = tokenDatum = {\n        $numDocumentOccurrences: 0,\n        $totalNumOccurrences: 1,\n        $uidMap: {}\n      };\n    } else {\n      tokenDatum = tokenMap[token];\n      tokenDatum.$totalNumOccurrences++;\n    }\n\n    var uidMap = tokenDatum.$uidMap;\n\n    if (typeof uidMap[uid] !== 'object') {\n      tokenDatum.$numDocumentOccurrences++;\n      uidMap[uid] = {\n        $document: doc,\n        $numTokenOccurrences: 1\n      };\n    } else {\n      uidMap[uid].$numTokenOccurrences++;\n    }\n  }\n  /**\n   * @inheritDocs\n   */\n  ;\n\n  _proto.search = function search(tokens, corpus) {\n    var uidToDocumentMap = {};\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; i++) {\n      var token = tokens[i];\n      var tokenMetadata = this._tokenMap[token]; // Short circuit if no matches were found for any given token.\n\n      if (!tokenMetadata) {\n        return [];\n      }\n\n      if (i === 0) {\n        var keys = Object.keys(tokenMetadata.$uidMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n          uidToDocumentMap[uid] = tokenMetadata.$uidMap[uid].$document;\n        }\n      } else {\n        var keys = Object.keys(uidToDocumentMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n\n          if (typeof tokenMetadata.$uidMap[uid] !== 'object') {\n            delete uidToDocumentMap[uid];\n          }\n        }\n      }\n    }\n\n    var documents = [];\n\n    for (var uid in uidToDocumentMap) {\n      documents.push(uidToDocumentMap[uid]);\n    }\n\n    var calculateTfIdf = this._createCalculateTfIdf(); // Return documents sorted by TF-IDF\n\n\n    return documents.sort(function (documentA, documentB) {\n      return calculateTfIdf(tokens, documentB, corpus) - calculateTfIdf(tokens, documentA, corpus);\n    });\n  };\n\n  _proto._createCalculateIdf = function _createCalculateIdf() {\n    var tokenMap = this._tokenMap;\n    var tokenToIdfCache = this._tokenToIdfCache;\n    return function calculateIdf(token, documents) {\n      if (!tokenToIdfCache[token]) {\n        var numDocumentsWithToken = typeof tokenMap[token] !== 'undefined' ? tokenMap[token].$numDocumentOccurrences : 0;\n        tokenToIdfCache[token] = 1 + Math.log(documents.length / (1 + numDocumentsWithToken));\n      }\n\n      return tokenToIdfCache[token];\n    };\n  };\n\n  _proto._createCalculateTfIdf = function _createCalculateTfIdf() {\n    var tokenMap = this._tokenMap;\n    var uidFieldName = this._uidFieldName;\n\n    var calculateIdf = this._createCalculateIdf();\n\n    return function calculateTfIdf(tokens, document, documents) {\n      var score = 0;\n\n      for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n        var token = tokens[i];\n        var inverseDocumentFrequency = calculateIdf(token, documents);\n\n        if (inverseDocumentFrequency === Infinity) {\n          inverseDocumentFrequency = 0;\n        }\n\n        var uid;\n\n        if (uidFieldName instanceof Array) {\n          uid = document && getNestedFieldValue(document, uidFieldName);\n        } else {\n          uid = document && document[uidFieldName];\n        }\n\n        var termFrequency = typeof tokenMap[token] !== 'undefined' && typeof tokenMap[token].$uidMap[uid] !== 'undefined' ? tokenMap[token].$uidMap[uid].$numTokenOccurrences : 0;\n        score += termFrequency * inverseDocumentFrequency;\n      }\n\n      return score;\n    };\n  };\n\n  return TfIdfSearchIndex;\n}();\n/**\n * Search index capable of returning results matching a set of tokens but without any meaningful rank or order.\n */\n\n\nvar UnorderedSearchIndex = /*#__PURE__*/function () {\n  function UnorderedSearchIndex() {\n    this._tokenToUidToDocumentMap = {};\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = UnorderedSearchIndex.prototype;\n\n  _proto.indexDocument = function indexDocument(token, uid, doc) {\n    if (typeof this._tokenToUidToDocumentMap[token] !== 'object') {\n      this._tokenToUidToDocumentMap[token] = {};\n    }\n\n    this._tokenToUidToDocumentMap[token][uid] = doc;\n  }\n  /**\n   * @inheritDocs\n   */\n  ;\n\n  _proto.search = function search(tokens, corpus) {\n    var intersectingDocumentMap = {};\n    var tokenToUidToDocumentMap = this._tokenToUidToDocumentMap;\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; i++) {\n      var token = tokens[i];\n      var documentMap = tokenToUidToDocumentMap[token]; // Short circuit if no matches were found for any given token.\n\n      if (!documentMap) {\n        return [];\n      }\n\n      if (i === 0) {\n        var keys = Object.keys(documentMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n          intersectingDocumentMap[uid] = documentMap[uid];\n        }\n      } else {\n        var keys = Object.keys(intersectingDocumentMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n\n          if (typeof documentMap[uid] !== 'object') {\n            delete intersectingDocumentMap[uid];\n          }\n        }\n      }\n    }\n\n    var keys = Object.keys(intersectingDocumentMap);\n    var documents = [];\n\n    for (var i = 0, numKeys = keys.length; i < numKeys; i++) {\n      var uid = keys[i];\n      documents.push(intersectingDocumentMap[uid]);\n    }\n\n    return documents;\n  };\n\n  return UnorderedSearchIndex;\n}();\n\nvar REGEX = /[^a-zа-яё0-9\\-']+/i;\n/**\n * Simple tokenizer that splits strings on whitespace characters and returns an array of all non-empty substrings.\n */\n\nvar SimpleTokenizer = /*#__PURE__*/function () {\n  function SimpleTokenizer() {}\n\n  var _proto = SimpleTokenizer.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.tokenize = function tokenize(text) {\n    return text.split(REGEX).filter(function (text) {\n      return text;\n    } // Filter empty tokens\n    );\n  };\n\n  return SimpleTokenizer;\n}();\n/**\n * Stemming is the process of reducing search tokens to their root (or stem) so that searches for different forms of a\n * word will match. For example \"search\", \"searching\" and \"searched\" are all reduced to the stem \"search\".\n *\n * <p>This stemming tokenizer converts tokens (words) to their stem forms before returning them. It requires an\n * external stemming function to be provided; for this purpose I recommend the NPM 'porter-stemmer' library.\n *\n * <p>For more information see http : //tartarus.org/~martin/PorterStemmer/\n */\n\n\nvar StemmingTokenizer = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   *\n   * @param stemmingFunction Function capable of accepting a word and returning its stem.\n   * @param decoratedIndexStrategy Index strategy to be run after all stop words have been removed.\n   */\n  function StemmingTokenizer(stemmingFunction, decoratedTokenizer) {\n    this._stemmingFunction = stemmingFunction;\n    this._tokenizer = decoratedTokenizer;\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = StemmingTokenizer.prototype;\n\n  _proto.tokenize = function tokenize(text) {\n    return this._tokenizer.tokenize(text).map(this._stemmingFunction);\n  };\n\n  return StemmingTokenizer;\n}();\n/**\n * Stop words list copied from Lunr JS.\n */\n\n\nvar StopWordsMap = {\n  a: true,\n  able: true,\n  about: true,\n  across: true,\n  after: true,\n  all: true,\n  almost: true,\n  also: true,\n  am: true,\n  among: true,\n  an: true,\n  and: true,\n  any: true,\n  are: true,\n  as: true,\n  at: true,\n  be: true,\n  because: true,\n  been: true,\n  but: true,\n  by: true,\n  can: true,\n  cannot: true,\n  could: true,\n  dear: true,\n  did: true,\n  'do': true,\n  does: true,\n  either: true,\n  'else': true,\n  ever: true,\n  every: true,\n  'for': true,\n  from: true,\n  'get': true,\n  got: true,\n  had: true,\n  has: true,\n  have: true,\n  he: true,\n  her: true,\n  hers: true,\n  him: true,\n  his: true,\n  how: true,\n  however: true,\n  i: true,\n  'if': true,\n  'in': true,\n  into: true,\n  is: true,\n  it: true,\n  its: true,\n  just: true,\n  least: true,\n  \"let\": true,\n  like: true,\n  likely: true,\n  may: true,\n  me: true,\n  might: true,\n  most: true,\n  must: true,\n  my: true,\n  neither: true,\n  no: true,\n  nor: true,\n  not: true,\n  of: true,\n  off: true,\n  often: true,\n  on: true,\n  only: true,\n  or: true,\n  other: true,\n  our: true,\n  own: true,\n  rather: true,\n  said: true,\n  say: true,\n  says: true,\n  she: true,\n  should: true,\n  since: true,\n  so: true,\n  some: true,\n  than: true,\n  that: true,\n  the: true,\n  their: true,\n  them: true,\n  then: true,\n  there: true,\n  these: true,\n  they: true,\n  'this': true,\n  tis: true,\n  to: true,\n  too: true,\n  twas: true,\n  us: true,\n  wants: true,\n  was: true,\n  we: true,\n  were: true,\n  what: true,\n  when: true,\n  where: true,\n  which: true,\n  'while': true,\n  who: true,\n  whom: true,\n  why: true,\n  will: true,\n  'with': true,\n  would: true,\n  yet: true,\n  you: true,\n  your: true\n}; // Prevent false positives for inherited properties\n\nStopWordsMap.constructor = false;\nStopWordsMap.hasOwnProperty = false;\nStopWordsMap.isPrototypeOf = false;\nStopWordsMap.propertyIsEnumerable = false;\nStopWordsMap.toLocaleString = false;\nStopWordsMap.toString = false;\nStopWordsMap.valueOf = false;\n/**\n * Stop words are very common (e.g. \"a\", \"and\", \"the\") and are often not semantically meaningful in the context of a\n * search. This tokenizer removes stop words from a set of tokens before passing the remaining tokens along for\n * indexing or searching purposes.\n */\n\nvar StopWordsTokenizer = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   *\n   * @param decoratedIndexStrategy Index strategy to be run after all stop words have been removed.\n   */\n  function StopWordsTokenizer(decoratedTokenizer) {\n    this._tokenizer = decoratedTokenizer;\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = StopWordsTokenizer.prototype;\n\n  _proto.tokenize = function tokenize(text) {\n    return this._tokenizer.tokenize(text).filter(function (token) {\n      return !StopWordsMap[token];\n    });\n  };\n\n  return StopWordsTokenizer;\n}();\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Simple client-side searching within a set of documents.\n *\n * <p>Documents can be searched by any number of fields. Indexing and search strategies are highly customizable.\n */\n\n\nvar Search = /*#__PURE__*/function () {\n  /**\n   * Array containing either a property name or a path (list of property names) to a nested value\n   */\n\n  /**\n   * Constructor.\n   * @param uidFieldName Field containing values that uniquely identify search documents; this field's values are used\n   *                     to ensure that a search result set does not contain duplicate objects.\n   */\n  function Search(uidFieldName) {\n    if (!uidFieldName) {\n      throw Error('js-search requires a uid field name constructor parameter');\n    }\n\n    this._uidFieldName = uidFieldName; // Set default/recommended strategies\n\n    this._indexStrategy = new PrefixIndexStrategy();\n    this._searchIndex = new TfIdfSearchIndex(uidFieldName);\n    this._sanitizer = new LowerCaseSanitizer();\n    this._tokenizer = new SimpleTokenizer();\n    this._documents = [];\n    this._searchableFields = [];\n  }\n  /**\n   * Override the default index strategy.\n   * @param value Custom index strategy\n   * @throws Error if documents have already been indexed by this search instance\n   */\n\n\n  var _proto = Search.prototype;\n  /**\n   * Add a searchable document to the index. Document will automatically be indexed for search.\n   * @param document\n   */\n\n  _proto.addDocument = function addDocument(document) {\n    this.addDocuments([document]);\n  }\n  /**\n   * Adds searchable documents to the index. Documents will automatically be indexed for search.\n   * @param document\n   */\n  ;\n\n  _proto.addDocuments = function addDocuments(documents) {\n    this._documents = this._documents.concat(documents);\n    this.indexDocuments_(documents, this._searchableFields);\n  }\n  /**\n   * Add a new searchable field to the index. Existing documents will automatically be indexed using this new field.\n   *\n   * @param field Searchable field or field path. Pass a string to index a top-level field and an array of strings for nested fields.\n   */\n  ;\n\n  _proto.addIndex = function addIndex(field) {\n    this._searchableFields.push(field);\n\n    this.indexDocuments_(this._documents, [field]);\n  }\n  /**\n   * Search all documents for ones matching the specified query text.\n   * @param query\n   * @returns {Array<Object>}\n   */\n  ;\n\n  _proto.search = function search(query) {\n    var tokens = this._tokenizer.tokenize(this._sanitizer.sanitize(query));\n\n    return this._searchIndex.search(tokens, this._documents);\n  }\n  /**\n   * @param documents\n   * @param _searchableFields Array containing property names and paths (lists of property names) to nested values\n   * @private\n   */\n  ;\n\n  _proto.indexDocuments_ = function indexDocuments_(documents, _searchableFields) {\n    this._initialized = true;\n    var indexStrategy = this._indexStrategy;\n    var sanitizer = this._sanitizer;\n    var searchIndex = this._searchIndex;\n    var tokenizer = this._tokenizer;\n    var uidFieldName = this._uidFieldName;\n\n    for (var di = 0, numDocuments = documents.length; di < numDocuments; di++) {\n      var doc = documents[di];\n      var uid;\n\n      if (uidFieldName instanceof Array) {\n        uid = getNestedFieldValue(doc, uidFieldName);\n      } else {\n        uid = doc[uidFieldName];\n      }\n\n      for (var sfi = 0, numSearchableFields = _searchableFields.length; sfi < numSearchableFields; sfi++) {\n        var fieldValue;\n        var searchableField = _searchableFields[sfi];\n\n        if (searchableField instanceof Array) {\n          fieldValue = getNestedFieldValue(doc, searchableField);\n        } else {\n          fieldValue = doc[searchableField];\n        }\n\n        if (fieldValue != null && typeof fieldValue !== 'string' && fieldValue.toString) {\n          fieldValue = fieldValue.toString();\n        }\n\n        if (typeof fieldValue === 'string') {\n          var fieldTokens = tokenizer.tokenize(sanitizer.sanitize(fieldValue));\n\n          for (var fti = 0, numFieldValues = fieldTokens.length; fti < numFieldValues; fti++) {\n            var fieldToken = fieldTokens[fti];\n            var expandedTokens = indexStrategy.expandToken(fieldToken);\n\n            for (var eti = 0, nummExpandedTokens = expandedTokens.length; eti < nummExpandedTokens; eti++) {\n              var expandedToken = expandedTokens[eti];\n              searchIndex.indexDocument(expandedToken, uid, doc);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  _createClass(Search, [{\n    key: \"indexStrategy\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('IIndexStrategy cannot be set after initialization');\n      }\n\n      this._indexStrategy = value;\n    },\n    get: function get() {\n      return this._indexStrategy;\n    }\n    /**\n     * Override the default text sanitizing strategy.\n     * @param value Custom text sanitizing strategy\n     * @throws Error if documents have already been indexed by this search instance\n     */\n\n  }, {\n    key: \"sanitizer\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('ISanitizer cannot be set after initialization');\n      }\n\n      this._sanitizer = value;\n    },\n    get: function get() {\n      return this._sanitizer;\n    }\n    /**\n     * Override the default search index strategy.\n     * @param value Custom search index strategy\n     * @throws Error if documents have already been indexed\n     */\n\n  }, {\n    key: \"searchIndex\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('ISearchIndex cannot be set after initialization');\n      }\n\n      this._searchIndex = value;\n    },\n    get: function get() {\n      return this._searchIndex;\n    }\n    /**\n     * Override the default text tokenizing strategy.\n     * @param value Custom text tokenizing strategy\n     * @throws Error if documents have already been indexed by this search instance\n     */\n\n  }, {\n    key: \"tokenizer\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('ITokenizer cannot be set after initialization');\n      }\n\n      this._tokenizer = value;\n    },\n    get: function get() {\n      return this._tokenizer;\n    }\n  }]);\n\n  return Search;\n}();\n/**\n * This utility highlights the occurrences of tokens within a string of text. It can be used to give visual indicators\n * of match criteria within searchable fields.\n *\n * <p>For performance purposes this highlighter only works with full-word or prefix token indexes.\n */\n\n\nvar TokenHighlighter = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   *\n   * @param opt_indexStrategy Index strategy used by Search\n   * @param opt_sanitizer Sanitizer used by Search\n   * @param opt_wrapperTagName Optional wrapper tag name; defaults to 'mark' (e.g. <mark>)\n   */\n  function TokenHighlighter(opt_indexStrategy, opt_sanitizer, opt_wrapperTagName) {\n    this._indexStrategy = opt_indexStrategy || new PrefixIndexStrategy();\n    this._sanitizer = opt_sanitizer || new LowerCaseSanitizer();\n    this._wrapperTagName = opt_wrapperTagName || 'mark';\n  }\n  /**\n   * Highlights token occurrences within a string by wrapping them with a DOM element.\n   *\n   * @param text e.g. \"john wayne\"\n   * @param tokens e.g. [\"wa\"]\n   * @returns {string} e.g. \"john <mark>wa</mark>yne\"\n   */\n\n\n  var _proto = TokenHighlighter.prototype;\n\n  _proto.highlight = function highlight(text, tokens) {\n    var tagsLength = this._wrapText('').length;\n\n    var tokenDictionary = Object.create(null); // Create a token map for easier lookup below.\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; i++) {\n      var token = this._sanitizer.sanitize(tokens[i]);\n\n      var expandedTokens = this._indexStrategy.expandToken(token);\n\n      for (var j = 0, numExpandedTokens = expandedTokens.length; j < numExpandedTokens; j++) {\n        var expandedToken = expandedTokens[j];\n\n        if (!tokenDictionary[expandedToken]) {\n          tokenDictionary[expandedToken] = [token];\n        } else {\n          tokenDictionary[expandedToken].push(token);\n        }\n      }\n    } // Track actualCurrentWord and sanitizedCurrentWord separately in case we encounter nested tags.\n\n\n    var actualCurrentWord = '';\n    var sanitizedCurrentWord = '';\n    var currentWordStartIndex = 0; // Note this assumes either prefix or full word matching.\n\n    for (var i = 0, textLength = text.length; i < textLength; i++) {\n      var character = text.charAt(i);\n\n      if (character === ' ') {\n        actualCurrentWord = '';\n        sanitizedCurrentWord = '';\n        currentWordStartIndex = i + 1;\n      } else {\n        actualCurrentWord += character;\n        sanitizedCurrentWord += this._sanitizer.sanitize(character);\n      }\n\n      if (tokenDictionary[sanitizedCurrentWord] && tokenDictionary[sanitizedCurrentWord].indexOf(sanitizedCurrentWord) >= 0) {\n        actualCurrentWord = this._wrapText(actualCurrentWord);\n        text = text.substring(0, currentWordStartIndex) + actualCurrentWord + text.substring(i + 1);\n        i += tagsLength;\n        textLength += tagsLength;\n      }\n    }\n\n    return text;\n  }\n  /**\n   * @param text to wrap\n   * @returns Text wrapped by wrapper tag (e.g. \"foo\" becomes \"<mark>foo</mark>\")\n   * @private\n   */\n  ;\n\n  _proto._wrapText = function _wrapText(text) {\n    var tagName = this._wrapperTagName;\n    return \"<\" + tagName + \">\" + text + \"</\" + tagName + \">\";\n  };\n\n  return TokenHighlighter;\n}();\n\nexport { AllSubstringsIndexStrategy, CaseSensitiveSanitizer, ExactWordIndexStrategy, LowerCaseSanitizer, PrefixIndexStrategy, Search, SimpleTokenizer, StemmingTokenizer, StopWordsMap, StopWordsTokenizer, TfIdfSearchIndex, TokenHighlighter, UnorderedSearchIndex };","import React, { useState } from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nconst SearchResults = ({ results, query, categories, names }) => {\n    const { images } = useStaticQuery(graphql`\n        {\n            images: allFile(filter: { relativeDirectory: { eq: \"skills/large\" } }) {\n                totalCount\n                nodes {\n                    name\n                    ext\n                    childImageSharp {\n                        fixed(width: 88) {\n                            ...GatsbyImageSharpFixed\n                        }\n                    }\n                }\n            }\n        }\n    `)\n\n    const localStorageCategory = typeof window !== `undefined` ? window.localStorage.getItem(`search.filter.categories`) : \"\"\n    const [selectedCategory, setSelectedCategory] = useState(\n        localStorageCategory || \"All\"\n    )\n\n    const localStorageName = typeof window !== `undefined` ? window.localStorage.getItem(`search.filter.names`) : \"\"\n    const [selectedName, setSelectedName] = useState(\n        localStorageName || \"All\"\n    )\n\n    const onFilterChange = (filterName, e) => {\n        const value = e.target.value\n        if (filterName === \"categories\") {\n            setSelectedCategory(value)\n        } else if (filterName === \"names\") {\n            setSelectedName(value)\n        }\n\n        window.localStorage.setItem(`search.filter.${filterName}`, value)\n    }\n\n    const handleOnBlur = () => {}\n    const onClearFilters = () => {\n        setSelectedName(\"All\")\n        setSelectedCategory(\"All\")\n    }\n\n    const noResultsMessage = query\n        ? `No results for \"${query}\" query`\n        : \"Please, enter a search query to see some results.\"\n\n    if (!results.length) {\n        return <div className=\"search-results\">{noResultsMessage}</div>\n    }\n\n    const agents = [\"Envoy\", \"Priestess\", \"Spy\"]\n    const epicHeroNames = [\n        \"Achilles\",\n        \"Aeneas\",\n        \"Agamemnon\",\n        \"Hector\",\n        \"Hippolyta\",\n        \"Menelaus\",\n        \"Odysseus\",\n        \"Paris\",\n        \"Penthesilea\",\n        \"Sarpedon\"\n    ]\n    const countBeforeFilters = results.length\n    const selectedNameIsAgent = agents.includes(selectedName)\n    const selectedNameIsEpicHero = epicHeroNames.includes(selectedName)\n\n    if (selectedCategory && selectedCategory !== \"All\") {\n        const filteredCategory =\n            selectedNameIsAgent && selectedCategory === \"Hippolyta's Amazons\"\n                ? \"Common\"\n                : selectedCategory\n\n        const isPenthesilea =\n            selectedCategory === \"Penthesilea's Amazons\" && selectedName === \"Penthesilea\"\n        const isHippolyta =\n            selectedCategory === \"Hippolyta's Amazons\" && selectedName === \"Hippolyta\"\n        const isEpicHero = selectedNameIsEpicHero && selectedCategory === \"Common\"\n\n        if (!isPenthesilea && !isHippolyta && !isEpicHero) {\n            results = results.filter(result => result.category === filteredCategory)\n        }\n    }\n\n    if (selectedName && selectedName !== \"All\") {\n        results = results.filter(result => result.name === selectedName)\n    }\n\n    return (\n        <div className=\"search-results\">\n            <div className=\"search-results-header\">\n                <div className=\"search-results-count\">{results.length} results</div>\n                <div className=\"search-results-filters\">\n                    <span className=\"select search-results-filter\">\n                        <select\n                            value={selectedCategory}\n                            onBlur={handleOnBlur}\n                            onChange={e => onFilterChange(\"categories\", e)}\n                        >\n                            <option value=\"All\">All categories</option>\n                            <option disabled aria-label=\"Disabled\" />\n                            {categories.map(category => (\n                                <option key={category} value={category}>\n                                    {category}\n                                </option>\n                            ))}\n                        </select>\n                    </span>\n\n                    <span className=\"select search-results-filter\">\n                        <select\n                            value={selectedName}\n                            onBlur={handleOnBlur}\n                            onChange={e => onFilterChange(\"names\", e)}\n                        >\n                            <option value=\"All\">All names</option>\n                            <optgroup label=\"Epic Heroes\">\n                                {names.map(name => {\n                                    if (!epicHeroNames.includes(name)) {\n                                        return null\n                                    }\n\n                                    return (\n                                        <option key={name} value={name}>\n                                            {name}\n                                        </option>\n                                    )\n                                })}\n                            </optgroup>\n                            <optgroup label=\"Hero Classes\">\n                                {names.map(name => {\n                                    if (epicHeroNames.includes(name) || agents.includes(name)) {\n                                        return null\n                                    }\n\n                                    return (\n                                        <option key={name} value={name}>\n                                            {name}\n                                        </option>\n                                    )\n                                })}\n                            </optgroup>\n                            <optgroup label=\"Agents\">\n                                {names.map(name => {\n                                    if (!agents.includes(name)) {\n                                        return null\n                                    }\n\n                                    return (\n                                        <option key={name} value={name}>\n                                            {name}\n                                        </option>\n                                    )\n                                })}\n                            </optgroup>\n                        </select>\n                    </span>\n                </div>\n            </div>\n\n            {!results.length ? (\n                <>\n                    <p>There is however {countBeforeFilters} results without filters.</p>\n                    <p>\n                        <button onClick={onClearFilters} style={{ paddingLeft: 0 }}>\n                            Clear filters\n                        </button>\n                    </p>\n                </>\n            ) : (\n                \"\"\n            )}\n\n            {results.map((result, i) => {\n                const img = images.nodes.find(\n                    node => result.image_path === `${node.name}${node.ext}`\n                )\n\n                return (\n                    <div className=\"search-result\" key={i}>\n                        <div className=\"search-result-icon\">\n                            {img ? <Img fixed={img.childImageSharp.fixed} /> : \"\"}\n                        </div>\n                        <div className=\"search-result-content\">\n                            <h4 className=\"search-result-title\">\n                                <Link to={result.slug}>{result.localised_name}</Link>\n                                <span className=\"search-result-character\">\n                                    {result.character.title}\n                                </span>\n                            </h4>\n                            <p className=\"search-result-description\">\n                                {result.localised_description}\n                            </p>\n                        </div>\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default SearchResults\n","import React from \"react\"\nimport \"../../styles/loading-indicator.scss\"\n\nexport const LoadingIndicator = () => {\n    return (\n        <div className=\"loading-indicator\">\n            <div className=\"circle circle--1\" />\n            <div className=\"circle circle--2\" />\n            <div className=\"circle circle--3\" />\n        </div>\n    )\n}\n\nexport default LoadingIndicator\n","import React, { useState, useEffect, useRef } from \"react\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport * as JsSearch from \"js-search\"\nimport qs from \"query-string\"\nimport SearchResult from \"../components/search/search-results\"\nimport LoadingIndicator from \"../components/search/loading-indicator\"\n\nimport \"../styles/search.scss\"\n\nconst createSearch = documents => {\n    const search = new JsSearch.Search(`uid`)\n    search.indexStrategy = new JsSearch.PrefixIndexStrategy()\n\n    search.sanitizer = new JsSearch.LowerCaseSanitizer()\n\n    search.addIndex(`localised_name`)\n    search.addDocuments(documents)\n    return search\n}\n\nconst getSearchResults = (search, searchQuery) => {\n    if (!search) {\n        return []\n    }\n\n    if (!searchQuery) {\n        return []\n    }\n\n    return search.search(searchQuery).sort((a, b) => {\n        if (a.slug === b.slug) return 0\n        return a.slug > b.slug ? 1 : -1\n    })\n}\n\nconst SearchTemplate = ({ data, pageContext }) => {\n    const hash = typeof window !== `undefined` ? window.location.hash : \"\"\n    const { searchData } = pageContext\n    const { documents } = searchData\n\n    const [query, setQuery] = useState(\"\")\n    const [results, setResults] = useState([])\n    const [isLoading, setIsLoading] = useState(true)\n    const [search, setSearch] = useState(null)\n\n    const refContenteditable = useRef(null)\n\n    const buildIndex = () => {\n        setSearch(createSearch(documents))\n    }\n\n    const onQueryInput = e => {\n        const { key } = e\n        if (key !== \"Enter\") {\n            return\n        }\n\n        const textContent = refContenteditable.current.textContent\n        setQuery(textContent)\n        refContenteditable.current.blur()\n    }\n\n    useEffect(buildIndex, [])\n\n    useEffect(() => {\n        const result = qs.parse(hash)\n        if (!result.query) return\n        setQuery(result.query)\n    }, [search, hash])\n\n    useEffect(() => {\n        if (!query) return\n        window.location.hash = qs.stringify({ query })\n        setIsLoading(true)\n\n        setTimeout(() => {\n            setResults(getSearchResults(search, query))\n            setIsLoading(false)\n        }, 500)\n    }, [search, query])\n\n    const hiddenCategories = [\"Amazons\", \"Danaans\", \"Trojans\", \"Horde Amazons\"]\n    const alphaSort = (a, b) => {\n        if (a === b) return 0\n        return a < b ? -1 : 1\n    }\n    const categories = [...new Set(documents.map(node => node.category))]\n        .sort(alphaSort)\n        .filter(category => !hiddenCategories.includes(category))\n    const names = [...new Set(documents.map(node => node.name))].sort((a, b) => {\n        if (a.includes(\"-\") && !b.includes(\"-\")) {\n            return 1\n        }\n\n        if (b.includes(\"-\") && !a.includes(\"-\")) {\n            return -1\n        }\n\n        return alphaSort(a, b)\n    })\n\n    return (\n        <Layout>\n            <SEO title={`Search`} />\n\n            <div className=\"search\">\n                <div className=\"page-header\">\n                    <div className=\"container\">\n                        <h2 className=\"page-header-title\">Search Results /</h2>\n                        <h3\n                            className=\"page-header-subtitle search-header-query\"\n                            contentEditable=\"true\"\n                            spellCheck=\"false\"\n                            ref={refContenteditable}\n                            suppressContentEditableWarning={true}\n                            role=\"presentation\"\n                            onKeyPress={onQueryInput}\n                        >\n                            {query}\n                        </h3>\n                    </div>\n                </div>\n\n                <div className=\"container\" style={{ paddingTop: 0 }}>\n                    {isLoading && query ? (\n                        <div className=\"search-results\">\n                            <LoadingIndicator />\n                        </div>\n                    ) : (\n                        <SearchResult\n                            results={results}\n                            query={query}\n                            categories={categories}\n                            names={names}\n                        />\n                    )}\n                </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default SearchTemplate\n"],"sourceRoot":""}