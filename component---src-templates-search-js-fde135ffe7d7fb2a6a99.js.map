{"version":3,"sources":["webpack:///./node_modules/js-search/dist/esm/js-search.js","webpack:///./src/templates/search.js"],"names":["AllSubstringsIndexStrategy","prototype","expandToken","token","string","expandedTokens","i","length","j","charAt","push","ExactWordIndexStrategy","PrefixIndexStrategy","CaseSensitiveSanitizer","sanitize","text","trim","LowerCaseSanitizer","toLocaleLowerCase","getNestedFieldValue","object","path","value","TfIdfSearchIndex","uidFieldName","this","_uidFieldName","_tokenToIdfCache","_tokenMap","_proto","indexDocument","uid","doc","tokenDatum","tokenMap","$numDocumentOccurrences","$totalNumOccurrences","$uidMap","uidMap","$document","$numTokenOccurrences","search","tokens","corpus","uidToDocumentMap","numTokens","tokenMetadata","numKeys","keys","Object","documents","calculateTfIdf","_createCalculateTfIdf","sort","documentA","documentB","_createCalculateIdf","tokenToIdfCache","numDocumentsWithToken","Math","log","calculateIdf","document","score","inverseDocumentFrequency","Infinity","Array","REGEX","SimpleTokenizer","tokenize","split","filter","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","Search","Error","_indexStrategy","_searchIndex","_sanitizer","_tokenizer","_documents","_searchableFields","Constructor","protoProps","staticProps","addDocument","addDocuments","concat","indexDocuments_","addIndex","field","query","_initialized","indexStrategy","sanitizer","searchIndex","tokenizer","di","numDocuments","sfi","numSearchableFields","fieldValue","searchableField","toString","fieldTokens","fti","numFieldValues","fieldToken","eti","nummExpandedTokens","expandedToken","set","get","options","searchSanitizer","getSearchResults","searchQuery","a","b","slug","SearchTemplate","data","pageContext","hash","window","location","searchData","images","useState","setQuery","results","setResults","setSearch","useEffect","JsSearch","createSearch","result","qs","parse","title","className","style","paddingTop","map","img","nodes","find","node","image_path","name","ext","fixed","childImageSharp","to","localised_name","character","localised_description"],"mappings":"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","file":"component---src-templates-search-js-fde135ffe7d7fb2a6a99.js","sourcesContent":["/**\n * Indexes for all substring searches (e.g. the term \"cat\" is indexed as \"c\", \"ca\", \"cat\", \"a\", \"at\", and \"t\").\n */\nvar AllSubstringsIndexStrategy = /*#__PURE__*/function () {\n  function AllSubstringsIndexStrategy() {}\n\n  var _proto = AllSubstringsIndexStrategy.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.expandToken = function expandToken(token) {\n    var expandedTokens = [];\n    var string;\n\n    for (var i = 0, length = token.length; i < length; ++i) {\n      string = '';\n\n      for (var j = i; j < length; ++j) {\n        string += token.charAt(j);\n        expandedTokens.push(string);\n      }\n    }\n\n    return expandedTokens;\n  };\n\n  return AllSubstringsIndexStrategy;\n}();\n/**\n * Indexes for exact word matches.\n */\n\n\nvar ExactWordIndexStrategy = /*#__PURE__*/function () {\n  function ExactWordIndexStrategy() {}\n\n  var _proto = ExactWordIndexStrategy.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.expandToken = function expandToken(token) {\n    return token ? [token] : [];\n  };\n\n  return ExactWordIndexStrategy;\n}();\n/**\n * Indexes for prefix searches (e.g. the term \"cat\" is indexed as \"c\", \"ca\", and \"cat\" allowing prefix search lookups).\n */\n\n\nvar PrefixIndexStrategy = /*#__PURE__*/function () {\n  function PrefixIndexStrategy() {}\n\n  var _proto = PrefixIndexStrategy.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.expandToken = function expandToken(token) {\n    var expandedTokens = [];\n    var string = '';\n\n    for (var i = 0, length = token.length; i < length; ++i) {\n      string += token.charAt(i);\n      expandedTokens.push(string);\n    }\n\n    return expandedTokens;\n  };\n\n  return PrefixIndexStrategy;\n}();\n/**\n * Enforces case-sensitive text matches.\n */\n\n\nvar CaseSensitiveSanitizer = /*#__PURE__*/function () {\n  function CaseSensitiveSanitizer() {}\n\n  var _proto = CaseSensitiveSanitizer.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.sanitize = function sanitize(text) {\n    return text ? text.trim() : '';\n  };\n\n  return CaseSensitiveSanitizer;\n}();\n/**\n * Sanitizes text by converting to a locale-friendly lower-case version and triming leading and trailing whitespace.\n */\n\n\nvar LowerCaseSanitizer = /*#__PURE__*/function () {\n  function LowerCaseSanitizer() {}\n\n  var _proto = LowerCaseSanitizer.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.sanitize = function sanitize(text) {\n    return text ? text.toLocaleLowerCase().trim() : '';\n  };\n\n  return LowerCaseSanitizer;\n}();\n/**\n * Find and return a nested object value.\n *\n * @param object to crawl\n * @param path Property path\n * @returns {any}\n */\n\n\nfunction getNestedFieldValue(object, path) {\n  path = path || [];\n  object = object || {};\n  var value = object; // walk down the property path\n\n  for (var i = 0; i < path.length; i++) {\n    value = value[path[i]];\n\n    if (value == null) {\n      return null;\n    }\n  }\n\n  return value;\n}\n/**\n * Search index capable of returning results matching a set of tokens and ranked according to TF-IDF.\n */\n\n\nvar TfIdfSearchIndex = /*#__PURE__*/function () {\n  function TfIdfSearchIndex(uidFieldName) {\n    this._uidFieldName = uidFieldName;\n    this._tokenToIdfCache = {};\n    this._tokenMap = {};\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = TfIdfSearchIndex.prototype;\n\n  _proto.indexDocument = function indexDocument(token, uid, doc) {\n    this._tokenToIdfCache = {}; // New index invalidates previous IDF caches\n\n    var tokenMap = this._tokenMap;\n    var tokenDatum;\n\n    if (typeof tokenMap[token] !== 'object') {\n      tokenMap[token] = tokenDatum = {\n        $numDocumentOccurrences: 0,\n        $totalNumOccurrences: 1,\n        $uidMap: {}\n      };\n    } else {\n      tokenDatum = tokenMap[token];\n      tokenDatum.$totalNumOccurrences++;\n    }\n\n    var uidMap = tokenDatum.$uidMap;\n\n    if (typeof uidMap[uid] !== 'object') {\n      tokenDatum.$numDocumentOccurrences++;\n      uidMap[uid] = {\n        $document: doc,\n        $numTokenOccurrences: 1\n      };\n    } else {\n      uidMap[uid].$numTokenOccurrences++;\n    }\n  }\n  /**\n   * @inheritDocs\n   */\n  ;\n\n  _proto.search = function search(tokens, corpus) {\n    var uidToDocumentMap = {};\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; i++) {\n      var token = tokens[i];\n      var tokenMetadata = this._tokenMap[token]; // Short circuit if no matches were found for any given token.\n\n      if (!tokenMetadata) {\n        return [];\n      }\n\n      if (i === 0) {\n        var keys = Object.keys(tokenMetadata.$uidMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n          uidToDocumentMap[uid] = tokenMetadata.$uidMap[uid].$document;\n        }\n      } else {\n        var keys = Object.keys(uidToDocumentMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n\n          if (typeof tokenMetadata.$uidMap[uid] !== 'object') {\n            delete uidToDocumentMap[uid];\n          }\n        }\n      }\n    }\n\n    var documents = [];\n\n    for (var uid in uidToDocumentMap) {\n      documents.push(uidToDocumentMap[uid]);\n    }\n\n    var calculateTfIdf = this._createCalculateTfIdf(); // Return documents sorted by TF-IDF\n\n\n    return documents.sort(function (documentA, documentB) {\n      return calculateTfIdf(tokens, documentB, corpus) - calculateTfIdf(tokens, documentA, corpus);\n    });\n  };\n\n  _proto._createCalculateIdf = function _createCalculateIdf() {\n    var tokenMap = this._tokenMap;\n    var tokenToIdfCache = this._tokenToIdfCache;\n    return function calculateIdf(token, documents) {\n      if (!tokenToIdfCache[token]) {\n        var numDocumentsWithToken = typeof tokenMap[token] !== 'undefined' ? tokenMap[token].$numDocumentOccurrences : 0;\n        tokenToIdfCache[token] = 1 + Math.log(documents.length / (1 + numDocumentsWithToken));\n      }\n\n      return tokenToIdfCache[token];\n    };\n  };\n\n  _proto._createCalculateTfIdf = function _createCalculateTfIdf() {\n    var tokenMap = this._tokenMap;\n    var uidFieldName = this._uidFieldName;\n\n    var calculateIdf = this._createCalculateIdf();\n\n    return function calculateTfIdf(tokens, document, documents) {\n      var score = 0;\n\n      for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n        var token = tokens[i];\n        var inverseDocumentFrequency = calculateIdf(token, documents);\n\n        if (inverseDocumentFrequency === Infinity) {\n          inverseDocumentFrequency = 0;\n        }\n\n        var uid;\n\n        if (uidFieldName instanceof Array) {\n          uid = document && getNestedFieldValue(document, uidFieldName);\n        } else {\n          uid = document && document[uidFieldName];\n        }\n\n        var termFrequency = typeof tokenMap[token] !== 'undefined' && typeof tokenMap[token].$uidMap[uid] !== 'undefined' ? tokenMap[token].$uidMap[uid].$numTokenOccurrences : 0;\n        score += termFrequency * inverseDocumentFrequency;\n      }\n\n      return score;\n    };\n  };\n\n  return TfIdfSearchIndex;\n}();\n/**\n * Search index capable of returning results matching a set of tokens but without any meaningful rank or order.\n */\n\n\nvar UnorderedSearchIndex = /*#__PURE__*/function () {\n  function UnorderedSearchIndex() {\n    this._tokenToUidToDocumentMap = {};\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = UnorderedSearchIndex.prototype;\n\n  _proto.indexDocument = function indexDocument(token, uid, doc) {\n    if (typeof this._tokenToUidToDocumentMap[token] !== 'object') {\n      this._tokenToUidToDocumentMap[token] = {};\n    }\n\n    this._tokenToUidToDocumentMap[token][uid] = doc;\n  }\n  /**\n   * @inheritDocs\n   */\n  ;\n\n  _proto.search = function search(tokens, corpus) {\n    var intersectingDocumentMap = {};\n    var tokenToUidToDocumentMap = this._tokenToUidToDocumentMap;\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; i++) {\n      var token = tokens[i];\n      var documentMap = tokenToUidToDocumentMap[token]; // Short circuit if no matches were found for any given token.\n\n      if (!documentMap) {\n        return [];\n      }\n\n      if (i === 0) {\n        var keys = Object.keys(documentMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n          intersectingDocumentMap[uid] = documentMap[uid];\n        }\n      } else {\n        var keys = Object.keys(intersectingDocumentMap);\n\n        for (var j = 0, numKeys = keys.length; j < numKeys; j++) {\n          var uid = keys[j];\n\n          if (typeof documentMap[uid] !== 'object') {\n            delete intersectingDocumentMap[uid];\n          }\n        }\n      }\n    }\n\n    var keys = Object.keys(intersectingDocumentMap);\n    var documents = [];\n\n    for (var i = 0, numKeys = keys.length; i < numKeys; i++) {\n      var uid = keys[i];\n      documents.push(intersectingDocumentMap[uid]);\n    }\n\n    return documents;\n  };\n\n  return UnorderedSearchIndex;\n}();\n\nvar REGEX = /[^a-zа-яё0-9\\-']+/i;\n/**\n * Simple tokenizer that splits strings on whitespace characters and returns an array of all non-empty substrings.\n */\n\nvar SimpleTokenizer = /*#__PURE__*/function () {\n  function SimpleTokenizer() {}\n\n  var _proto = SimpleTokenizer.prototype;\n  /**\n   * @inheritDocs\n   */\n\n  _proto.tokenize = function tokenize(text) {\n    return text.split(REGEX).filter(function (text) {\n      return text;\n    } // Filter empty tokens\n    );\n  };\n\n  return SimpleTokenizer;\n}();\n/**\n * Stemming is the process of reducing search tokens to their root (or stem) so that searches for different forms of a\n * word will match. For example \"search\", \"searching\" and \"searched\" are all reduced to the stem \"search\".\n *\n * <p>This stemming tokenizer converts tokens (words) to their stem forms before returning them. It requires an\n * external stemming function to be provided; for this purpose I recommend the NPM 'porter-stemmer' library.\n *\n * <p>For more information see http : //tartarus.org/~martin/PorterStemmer/\n */\n\n\nvar StemmingTokenizer = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   *\n   * @param stemmingFunction Function capable of accepting a word and returning its stem.\n   * @param decoratedIndexStrategy Index strategy to be run after all stop words have been removed.\n   */\n  function StemmingTokenizer(stemmingFunction, decoratedTokenizer) {\n    this._stemmingFunction = stemmingFunction;\n    this._tokenizer = decoratedTokenizer;\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = StemmingTokenizer.prototype;\n\n  _proto.tokenize = function tokenize(text) {\n    return this._tokenizer.tokenize(text).map(this._stemmingFunction);\n  };\n\n  return StemmingTokenizer;\n}();\n/**\n * Stop words list copied from Lunr JS.\n */\n\n\nvar StopWordsMap = {\n  a: true,\n  able: true,\n  about: true,\n  across: true,\n  after: true,\n  all: true,\n  almost: true,\n  also: true,\n  am: true,\n  among: true,\n  an: true,\n  and: true,\n  any: true,\n  are: true,\n  as: true,\n  at: true,\n  be: true,\n  because: true,\n  been: true,\n  but: true,\n  by: true,\n  can: true,\n  cannot: true,\n  could: true,\n  dear: true,\n  did: true,\n  'do': true,\n  does: true,\n  either: true,\n  'else': true,\n  ever: true,\n  every: true,\n  'for': true,\n  from: true,\n  'get': true,\n  got: true,\n  had: true,\n  has: true,\n  have: true,\n  he: true,\n  her: true,\n  hers: true,\n  him: true,\n  his: true,\n  how: true,\n  however: true,\n  i: true,\n  'if': true,\n  'in': true,\n  into: true,\n  is: true,\n  it: true,\n  its: true,\n  just: true,\n  least: true,\n  \"let\": true,\n  like: true,\n  likely: true,\n  may: true,\n  me: true,\n  might: true,\n  most: true,\n  must: true,\n  my: true,\n  neither: true,\n  no: true,\n  nor: true,\n  not: true,\n  of: true,\n  off: true,\n  often: true,\n  on: true,\n  only: true,\n  or: true,\n  other: true,\n  our: true,\n  own: true,\n  rather: true,\n  said: true,\n  say: true,\n  says: true,\n  she: true,\n  should: true,\n  since: true,\n  so: true,\n  some: true,\n  than: true,\n  that: true,\n  the: true,\n  their: true,\n  them: true,\n  then: true,\n  there: true,\n  these: true,\n  they: true,\n  'this': true,\n  tis: true,\n  to: true,\n  too: true,\n  twas: true,\n  us: true,\n  wants: true,\n  was: true,\n  we: true,\n  were: true,\n  what: true,\n  when: true,\n  where: true,\n  which: true,\n  'while': true,\n  who: true,\n  whom: true,\n  why: true,\n  will: true,\n  'with': true,\n  would: true,\n  yet: true,\n  you: true,\n  your: true\n}; // Prevent false positives for inherited properties\n\nStopWordsMap.constructor = false;\nStopWordsMap.hasOwnProperty = false;\nStopWordsMap.isPrototypeOf = false;\nStopWordsMap.propertyIsEnumerable = false;\nStopWordsMap.toLocaleString = false;\nStopWordsMap.toString = false;\nStopWordsMap.valueOf = false;\n/**\n * Stop words are very common (e.g. \"a\", \"and\", \"the\") and are often not semantically meaningful in the context of a\n * search. This tokenizer removes stop words from a set of tokens before passing the remaining tokens along for\n * indexing or searching purposes.\n */\n\nvar StopWordsTokenizer = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   *\n   * @param decoratedIndexStrategy Index strategy to be run after all stop words have been removed.\n   */\n  function StopWordsTokenizer(decoratedTokenizer) {\n    this._tokenizer = decoratedTokenizer;\n  }\n  /**\n   * @inheritDocs\n   */\n\n\n  var _proto = StopWordsTokenizer.prototype;\n\n  _proto.tokenize = function tokenize(text) {\n    return this._tokenizer.tokenize(text).filter(function (token) {\n      return !StopWordsMap[token];\n    });\n  };\n\n  return StopWordsTokenizer;\n}();\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n/**\n * Simple client-side searching within a set of documents.\n *\n * <p>Documents can be searched by any number of fields. Indexing and search strategies are highly customizable.\n */\n\n\nvar Search = /*#__PURE__*/function () {\n  /**\n   * Array containing either a property name or a path (list of property names) to a nested value\n   */\n\n  /**\n   * Constructor.\n   * @param uidFieldName Field containing values that uniquely identify search documents; this field's values are used\n   *                     to ensure that a search result set does not contain duplicate objects.\n   */\n  function Search(uidFieldName) {\n    if (!uidFieldName) {\n      throw Error('js-search requires a uid field name constructor parameter');\n    }\n\n    this._uidFieldName = uidFieldName; // Set default/recommended strategies\n\n    this._indexStrategy = new PrefixIndexStrategy();\n    this._searchIndex = new TfIdfSearchIndex(uidFieldName);\n    this._sanitizer = new LowerCaseSanitizer();\n    this._tokenizer = new SimpleTokenizer();\n    this._documents = [];\n    this._searchableFields = [];\n  }\n  /**\n   * Override the default index strategy.\n   * @param value Custom index strategy\n   * @throws Error if documents have already been indexed by this search instance\n   */\n\n\n  var _proto = Search.prototype;\n  /**\n   * Add a searchable document to the index. Document will automatically be indexed for search.\n   * @param document\n   */\n\n  _proto.addDocument = function addDocument(document) {\n    this.addDocuments([document]);\n  }\n  /**\n   * Adds searchable documents to the index. Documents will automatically be indexed for search.\n   * @param document\n   */\n  ;\n\n  _proto.addDocuments = function addDocuments(documents) {\n    this._documents = this._documents.concat(documents);\n    this.indexDocuments_(documents, this._searchableFields);\n  }\n  /**\n   * Add a new searchable field to the index. Existing documents will automatically be indexed using this new field.\n   *\n   * @param field Searchable field or field path. Pass a string to index a top-level field and an array of strings for nested fields.\n   */\n  ;\n\n  _proto.addIndex = function addIndex(field) {\n    this._searchableFields.push(field);\n\n    this.indexDocuments_(this._documents, [field]);\n  }\n  /**\n   * Search all documents for ones matching the specified query text.\n   * @param query\n   * @returns {Array<Object>}\n   */\n  ;\n\n  _proto.search = function search(query) {\n    var tokens = this._tokenizer.tokenize(this._sanitizer.sanitize(query));\n\n    return this._searchIndex.search(tokens, this._documents);\n  }\n  /**\n   * @param documents\n   * @param _searchableFields Array containing property names and paths (lists of property names) to nested values\n   * @private\n   */\n  ;\n\n  _proto.indexDocuments_ = function indexDocuments_(documents, _searchableFields) {\n    this._initialized = true;\n    var indexStrategy = this._indexStrategy;\n    var sanitizer = this._sanitizer;\n    var searchIndex = this._searchIndex;\n    var tokenizer = this._tokenizer;\n    var uidFieldName = this._uidFieldName;\n\n    for (var di = 0, numDocuments = documents.length; di < numDocuments; di++) {\n      var doc = documents[di];\n      var uid;\n\n      if (uidFieldName instanceof Array) {\n        uid = getNestedFieldValue(doc, uidFieldName);\n      } else {\n        uid = doc[uidFieldName];\n      }\n\n      for (var sfi = 0, numSearchableFields = _searchableFields.length; sfi < numSearchableFields; sfi++) {\n        var fieldValue;\n        var searchableField = _searchableFields[sfi];\n\n        if (searchableField instanceof Array) {\n          fieldValue = getNestedFieldValue(doc, searchableField);\n        } else {\n          fieldValue = doc[searchableField];\n        }\n\n        if (fieldValue != null && typeof fieldValue !== 'string' && fieldValue.toString) {\n          fieldValue = fieldValue.toString();\n        }\n\n        if (typeof fieldValue === 'string') {\n          var fieldTokens = tokenizer.tokenize(sanitizer.sanitize(fieldValue));\n\n          for (var fti = 0, numFieldValues = fieldTokens.length; fti < numFieldValues; fti++) {\n            var fieldToken = fieldTokens[fti];\n            var expandedTokens = indexStrategy.expandToken(fieldToken);\n\n            for (var eti = 0, nummExpandedTokens = expandedTokens.length; eti < nummExpandedTokens; eti++) {\n              var expandedToken = expandedTokens[eti];\n              searchIndex.indexDocument(expandedToken, uid, doc);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  _createClass(Search, [{\n    key: \"indexStrategy\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('IIndexStrategy cannot be set after initialization');\n      }\n\n      this._indexStrategy = value;\n    },\n    get: function get() {\n      return this._indexStrategy;\n    }\n    /**\n     * Override the default text sanitizing strategy.\n     * @param value Custom text sanitizing strategy\n     * @throws Error if documents have already been indexed by this search instance\n     */\n\n  }, {\n    key: \"sanitizer\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('ISanitizer cannot be set after initialization');\n      }\n\n      this._sanitizer = value;\n    },\n    get: function get() {\n      return this._sanitizer;\n    }\n    /**\n     * Override the default search index strategy.\n     * @param value Custom search index strategy\n     * @throws Error if documents have already been indexed\n     */\n\n  }, {\n    key: \"searchIndex\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('ISearchIndex cannot be set after initialization');\n      }\n\n      this._searchIndex = value;\n    },\n    get: function get() {\n      return this._searchIndex;\n    }\n    /**\n     * Override the default text tokenizing strategy.\n     * @param value Custom text tokenizing strategy\n     * @throws Error if documents have already been indexed by this search instance\n     */\n\n  }, {\n    key: \"tokenizer\",\n    set: function set(value) {\n      if (this._initialized) {\n        throw Error('ITokenizer cannot be set after initialization');\n      }\n\n      this._tokenizer = value;\n    },\n    get: function get() {\n      return this._tokenizer;\n    }\n  }]);\n\n  return Search;\n}();\n/**\n * This utility highlights the occurrences of tokens within a string of text. It can be used to give visual indicators\n * of match criteria within searchable fields.\n *\n * <p>For performance purposes this highlighter only works with full-word or prefix token indexes.\n */\n\n\nvar TokenHighlighter = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   *\n   * @param opt_indexStrategy Index strategy used by Search\n   * @param opt_sanitizer Sanitizer used by Search\n   * @param opt_wrapperTagName Optional wrapper tag name; defaults to 'mark' (e.g. <mark>)\n   */\n  function TokenHighlighter(opt_indexStrategy, opt_sanitizer, opt_wrapperTagName) {\n    this._indexStrategy = opt_indexStrategy || new PrefixIndexStrategy();\n    this._sanitizer = opt_sanitizer || new LowerCaseSanitizer();\n    this._wrapperTagName = opt_wrapperTagName || 'mark';\n  }\n  /**\n   * Highlights token occurrences within a string by wrapping them with a DOM element.\n   *\n   * @param text e.g. \"john wayne\"\n   * @param tokens e.g. [\"wa\"]\n   * @returns {string} e.g. \"john <mark>wa</mark>yne\"\n   */\n\n\n  var _proto = TokenHighlighter.prototype;\n\n  _proto.highlight = function highlight(text, tokens) {\n    var tagsLength = this._wrapText('').length;\n\n    var tokenDictionary = Object.create(null); // Create a token map for easier lookup below.\n\n    for (var i = 0, numTokens = tokens.length; i < numTokens; i++) {\n      var token = this._sanitizer.sanitize(tokens[i]);\n\n      var expandedTokens = this._indexStrategy.expandToken(token);\n\n      for (var j = 0, numExpandedTokens = expandedTokens.length; j < numExpandedTokens; j++) {\n        var expandedToken = expandedTokens[j];\n\n        if (!tokenDictionary[expandedToken]) {\n          tokenDictionary[expandedToken] = [token];\n        } else {\n          tokenDictionary[expandedToken].push(token);\n        }\n      }\n    } // Track actualCurrentWord and sanitizedCurrentWord separately in case we encounter nested tags.\n\n\n    var actualCurrentWord = '';\n    var sanitizedCurrentWord = '';\n    var currentWordStartIndex = 0; // Note this assumes either prefix or full word matching.\n\n    for (var i = 0, textLength = text.length; i < textLength; i++) {\n      var character = text.charAt(i);\n\n      if (character === ' ') {\n        actualCurrentWord = '';\n        sanitizedCurrentWord = '';\n        currentWordStartIndex = i + 1;\n      } else {\n        actualCurrentWord += character;\n        sanitizedCurrentWord += this._sanitizer.sanitize(character);\n      }\n\n      if (tokenDictionary[sanitizedCurrentWord] && tokenDictionary[sanitizedCurrentWord].indexOf(sanitizedCurrentWord) >= 0) {\n        actualCurrentWord = this._wrapText(actualCurrentWord);\n        text = text.substring(0, currentWordStartIndex) + actualCurrentWord + text.substring(i + 1);\n        i += tagsLength;\n        textLength += tagsLength;\n      }\n    }\n\n    return text;\n  }\n  /**\n   * @param text to wrap\n   * @returns Text wrapped by wrapper tag (e.g. \"foo\" becomes \"<mark>foo</mark>\")\n   * @private\n   */\n  ;\n\n  _proto._wrapText = function _wrapText(text) {\n    var tagName = this._wrapperTagName;\n    return \"<\" + tagName + \">\" + text + \"</\" + tagName + \">\";\n  };\n\n  return TokenHighlighter;\n}();\n\nexport { AllSubstringsIndexStrategy, CaseSensitiveSanitizer, ExactWordIndexStrategy, LowerCaseSanitizer, PrefixIndexStrategy, Search, SimpleTokenizer, StemmingTokenizer, StopWordsMap, StopWordsTokenizer, TfIdfSearchIndex, TokenHighlighter, UnorderedSearchIndex };","import React, { useState, useEffect } from \"react\"\nimport { Link } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport * as JsSearch from \"js-search\"\nimport qs from \"query-string\"\nimport \"../styles/search.scss\"\n\nconst options = {\n    indexStrategy: \"Prefix match\",\n    searchSanitizer: \"Lower Case\"\n}\n\nconst createSearch = (documents, options) => {\n    const { indexStrategy, searchSanitizer } = options\n\n    const search = new JsSearch.Search(`uid`)\n\n    // search.tokenizer = new JsSearch.StopWordsTokenizer(new JsSearch.SimpleTokenizer())\n\n    if (indexStrategy === `All`) {\n        search.indexStrategy = new JsSearch.AllSubstringsIndexStrategy()\n    } else if (indexStrategy === `Exact match`) {\n        search.indexStrategy = new JsSearch.ExactWordIndexStrategy()\n    } else if (indexStrategy === `Prefix match`) {\n        search.indexStrategy = new JsSearch.PrefixIndexStrategy()\n    }\n\n    if (searchSanitizer === `Lower Case`) {\n        search.sanitizer = new JsSearch.LowerCaseSanitizer()\n    } else if (searchSanitizer === `Case Sensitive`) {\n        search.sanitizer = new JsSearch.CaseSensitiveSanitizer()\n    }\n\n    // search.searchIndex = new JsSearch.TfIdfSearchIndex()\n    // search.searchIndex = new JsSearch.UnorderedSearchIndex()\n\n    search.addIndex(`localised_name`)\n    search.addDocuments(documents)\n    return search\n}\n\nconst getSearchResults = (search, searchQuery) => {\n    if (!search) {\n        return []\n    }\n\n    if (!searchQuery) {\n        return []\n    }\n\n    return search.search(searchQuery).sort((a, b) => {\n        if (a.slug === b.slug) return 0\n        return a.slug > b.slug ? 1 : -1\n    })\n}\n\nconst SearchTemplate = ({ data, pageContext }) => {\n    const hash = typeof window !== `undefined` ? window.location.hash : ''\n    const { searchData } = pageContext\n    const { documents } = searchData\n    const { images } = data\n\n    const [query, setQuery] = useState(\"\")\n    const [results, setResults] = useState([])\n    const [search, setSearch] = useState(null)\n\n    const buildIndex = () => {\n        setSearch(createSearch(documents, options))\n    }\n\n    useEffect(buildIndex, [])\n\n    useEffect(() => {\n        const result = qs.parse(hash)\n        if (!result.query) return\n        setQuery(result.query)\n        setResults(getSearchResults(search, result.query))\n    }, [search, hash])\n\n    useEffect(() => {\n        if (!query) return\n        window.search = search\n        setResults(getSearchResults(search, query))\n    }, [search, query])\n\n    return (\n        <Layout>\n            <SEO title={`Search`} />\n\n            <div className=\"search\">\n                <div className=\"page-header\">\n                    <div className=\"container\">\n                        <h2 className=\"page-header-title\">Search Results /</h2>\n                        <h3 className=\"page-header-subtitle\">{query}</h3>\n                    </div>\n                </div>\n\n                <div className=\"container\" style={{ paddingTop: 0 }}>\n                    <div className=\"search-results\">\n                        {results.map((result, i) => {\n                            const img = images.nodes.find(\n                                node => result.image_path === `${node.name}${node.ext}`\n                            )\n\n                            return (\n                                <div className=\"search-result\" key={i}>\n                                    <div className=\"search-result-icon\">\n                                        <Img fixed={img.childImageSharp.fixed} />\n                                    </div>\n                                    <div className=\"search-result-content\">\n                                        <h4 className=\"search-result-title\">\n                                            <Link to={result.slug}>{result.localised_name}</Link>\n                                            <span className=\"search-result-character\">\n                                                {result.character.title}\n                                            </span>\n                                        </h4>\n                                        <p className=\"search-result-description\">\n                                            {result.localised_description}\n                                        </p>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default SearchTemplate\n\nexport const query = graphql`\n    {\n        images: allFile(filter: { relativeDirectory: { eq: \"skills/large\" } }) {\n            totalCount\n            nodes {\n                name\n                ext\n                childImageSharp {\n                    fixed(width: 88) {\n                        ...GatsbyImageSharpFixed\n                    }\n                }\n            }\n        }\n    }\n`\n"],"sourceRoot":""}